diff --git a/BasicUsageEnvironment/include/DelayQueue.hh b/BasicUsageEnvironment/include/DelayQueue.hh
index 3566998..ac38091 100644
--- a/BasicUsageEnvironment/include/DelayQueue.hh
+++ b/BasicUsageEnvironment/include/DelayQueue.hh
@@ -74,12 +74,46 @@ protected:
   }
 
 private:
-  time_base_seconds& secs() {
-    return (time_base_seconds&)fTv.tv_sec;
+  // Safe accessors that avoid strict aliasing violations
+  time_base_seconds getSecs() const {
+    return static_cast<time_base_seconds>(fTv.tv_sec);
   }
-  time_base_seconds& usecs() {
-    return (time_base_seconds&)fTv.tv_usec;
+  void setSecs(time_base_seconds val) {
+    fTv.tv_sec = static_cast<decltype(fTv.tv_sec)>(val);
   }
+  time_base_seconds getUsecs() const {
+    return static_cast<time_base_seconds>(fTv.tv_usec);
+  }
+  void setUsecs(time_base_seconds val) {
+    fTv.tv_usec = static_cast<decltype(fTv.tv_usec)>(val);
+  }
+
+  // Legacy reference-returning methods for compatibility
+  // These use a proxy class to avoid aliasing violations
+  class SecsProxy {
+    Timeval* tv;
+  public:
+    SecsProxy(Timeval* t) : tv(t) {}
+    operator time_base_seconds() const { return tv->getSecs(); }
+    SecsProxy& operator=(time_base_seconds val) { tv->setSecs(val); return *this; }
+    SecsProxy& operator+=(time_base_seconds val) { tv->setSecs(tv->getSecs() + val); return *this; }
+    SecsProxy& operator-=(time_base_seconds val) { tv->setSecs(tv->getSecs() - val); return *this; }
+    SecsProxy& operator++() { tv->setSecs(tv->getSecs() + 1); return *this; }
+    SecsProxy& operator--() { tv->setSecs(tv->getSecs() - 1); return *this; }
+  };
+
+  class UsecsProxy {
+    Timeval* tv;
+  public:
+    UsecsProxy(Timeval* t) : tv(t) {}
+    operator time_base_seconds() const { return tv->getUsecs(); }
+    UsecsProxy& operator=(time_base_seconds val) { tv->setUsecs(val); return *this; }
+    UsecsProxy& operator+=(time_base_seconds val) { tv->setUsecs(tv->getUsecs() + val); return *this; }
+    UsecsProxy& operator-=(time_base_seconds val) { tv->setUsecs(tv->getUsecs() - val); return *this; }
+  };
+
+  SecsProxy secs() { return SecsProxy(this); }
+  UsecsProxy usecs() { return UsecsProxy(this); }
 
   struct timeval fTv;
 };
diff --git a/liveMedia/RTPSink.cpp b/liveMedia/RTPSink.cpp
index 61511fb..e5eabad 100644
--- a/liveMedia/RTPSink.cpp
+++ b/liveMedia/RTPSink.cpp
@@ -21,8 +21,19 @@ along with this library; if not, write to the Free Software Foundation, Inc.,
 #include "RTPSink.hh"
 #include "Base64.hh"
 #include "GroupsockHelper.hh"
+#include <chrono>
 
-////////// RTPSink //////////
+// Monotonic time helper function for embedded systems
+static void getMonotonicTime(struct timeval* tv) {
+  static auto start_time = std::chrono::steady_clock::now();
+  auto now = std::chrono::steady_clock::now();
+  auto elapsed = now - start_time;
+  auto elapsed_us = std::chrono::duration_cast<std::chrono::microseconds>(elapsed).count();
+  tv->tv_sec = elapsed_us / 1000000;
+  tv->tv_usec = elapsed_us % 1000000;
+}
+
+////////// RTPSink /////////
 
 Boolean RTPSink::lookupByName(UsageEnvironment& env, char const* sinkName,
 				RTPSink*& resultSink) {
@@ -172,7 +183,7 @@ RTPSink::RTPSink(UsageEnvironment& env,
     fNumChannels(numChannels), fEstimatedBitrate(0) {
   fRTPPayloadFormatName
     = strDup(rtpPayloadFormatName == NULL ? "???" : rtpPayloadFormatName);
-  gettimeofday(&fCreationTime, NULL);
+  getMonotonicTime(&fCreationTime);
   fTotalOctetCountStartTime = fCreationTime;
   resetPresentationTimes();
 
@@ -302,7 +313,7 @@ RTPTransmissionStats::RTPTransmissionStats(RTPSink& rtpSink, u_int32_t SSRC)
     fLastSRTime(0), fDiffSR_RRTime(0), fAtLeastTwoRRsHaveBeenReceived(False), fFirstPacket(True),
     fTotalOctetCount_hi(0), fTotalOctetCount_lo(0),
     fTotalPacketCount_hi(0), fTotalPacketCount_lo(0) {
-  gettimeofday(&fTimeCreated, NULL);
+  getMonotonicTime(&fTimeCreated);
 
   fLastOctetCount = rtpSink.octetCount();
   fLastPacketCount = rtpSink.packetCount();
@@ -323,7 +334,7 @@ void RTPTransmissionStats
     fOldLastPacketNumReceived = fLastPacketNumReceived;
     fOldTotNumPacketsLost = fTotNumPacketsLost;
   }
-  gettimeofday(&fTimeReceived, NULL);
+  getMonotonicTime(&fTimeReceived);
 
   fLastFromAddress = lastFromAddress;
   fPacketLossRatio = lossStats>>24;
